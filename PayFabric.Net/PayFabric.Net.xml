<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PayFabric.Net</name>
    </assembly>
    <members>
        <member name="M:PayFabric.Net.IWalletService.Update(PayFabric.Net.Models.Card)">
            <summary>
            Update the wallet card entry.
            Note: Only specify the ID and the properties that need to be updated.
            </summary>
            <param name="card"></param>
            <returns></returns>
        </member>
        <member name="P:PayFabric.Net.Models.Address.ID">
            <summary>
            Unique identifier for this record
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Address.Customer">
            <summary>
            ID for this customer. This is generated by the client upon creation of the customer.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Address.Country">
            <summary>
            Country name
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Address.State">
            <summary>
            State name
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Address.City">
            <summary>
            City name
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Address.Line1">
            <summary>
            Street line 1
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Address.Line2">
            <summary>
            Street line 2
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Address.Line3">
            <summary>
            Street line 3
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Address.Email">
            <summary>
            Email address
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Address.Phone">
            <summary>
            Phone number
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Address.ModifiedOn">
            <summary>
            Timestamp indicating when this record was last modified. It's format should like "3/23/2015 11:16:19 PM".
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Address.Zip">
            <summary>
            Zip code
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Card.ID">
            <summary>
            Unique identifier for this record. This ID is generated by PayFabric upon successful creation of a new card. The client cannot set or modify this value.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Card.Tender">
            <summary>
            Tender type. Valid options are CreditCard or ECheck.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Card.Customer">
            <summary>
            Customer ID as specified by the client upon creation of the customer.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Card.Account">
            <summary>
            The number of the credit card, or the eCheck/ACH account. When creating a new Card this attribute must be provided by the client in plaintext. When a client retrieves a card PayFabric always returns this attribute in masked format. Ignore this attribute when update a existing card.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Card.ExpDate">
            <summary>
            Expiration date of the credit card in the format of MMYY. Only valid for credit cards.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Card.CheckNumber">
            <summary>
            Check number. Only valid for eChecks, and required for specific Processors (TeleCheck, Encompass).
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Card.AccountType">
            <summary>
            eCheck account type. Only valid for eCheck accounts.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Card.Aba">
            <summary>
            Bank Routing Number. Only valid for eChecks.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Card.CardName">
            <summary>
            Type of credit card: Visa, Mastercard, Discover,JCB,AmericanExpress,DinersClub. Only valid for credit cards.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Card.IsDefaultCard">
            <summary>
            Indicates whether this is the primary card of the customer. Default value is False.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Card.IsLocked">
            <summary>
            Indicates whether the card is locked. Default value is False.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Card.IsSaveCard">
            <summary>
            Indicates whether to save this card in the customer's wallet. This attribute is only valid and should only be included in the object when using Create and Process a Transaction. And it will be set to false automatically for Verify transaction.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Card.ModifiedOn">
            <summary>
            This is a response field. Timestamp indicating when this record was last modified. It's format should like "3/23/2015 11:16:19 PM".
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Card.CardHolder">
            <summary>
            Cardholder object.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Card.Billto">
            <summary>
            Address object.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Card.Identifier">
            <summary>
            A client-defined identifier for this card. Developer can send a flag value to identify this card
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Card.UserDefine1">
            <summary>
            User-defined field 1. Developer can store additional data in this field.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Card.UserDefine2">
            <summary>
            User-defined field 2. Developer can store additional data in this field.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Card.UserDefine3">
            <summary>
            User-defined field 3. Developer can store additional data in this field.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Card.UserDefine4">
            <summary>
            User-defined field 4. Developer can store additional data in this field.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Card.Connector">
            <summary>
            The gateway name defined by PayFabric such as FirstDataGGe4, PayflowPro or Paymentech. This field will be set only if this card is a tokenized value for a specific gateway, such as FirstData or Paypal
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Card.GatewayToken">
            <summary>
            Gateway token. PayFabric send this value to gateway for processing a transaction
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Card.IssueNumber">
            <summary>
            This field is required for UK debit cards
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Card.StartDate">
            <summary>
            This field is required for UK debit cards, format is MMYY.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Card.NewCustomerNumber">
            <summary>
            This field is used to submit new customer number for updating this record's customer field.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Card.CardType">
            <summary>
            This is a response field, the possible value is 'Credit', 'Debit' or 'Prepaid' for credit card, and it is blank for eCheck.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Card.Cvc">
            <summary>
            The CVC code of the credit card. 
            Note: the CVC is NOT saved anywhere. 
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.CardHolder.DriverLicense">
            <summary>
            Driver license
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.CardHolder.FirstName">
            <summary>
            First name
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.CardHolder.LastName">
            <summary>
            Last name
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.CardHolder.MiddleName">
            <summary>
            Middle name
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.CardHolder.SSN">
            <summary>
            Social security number
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Document.Head">
            <summary>
            An array of key-value pairs. Usually, the key-value pairs represent the level 2 fields to submit to the gateway.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Document.Lines">
            <summary>
            An array of columns object.The columns objects represent the columns that belong to a specific line. Usually the columns objects represent the level 3 fields that you can submit to the gateway. Columns object is an array of key-value pairs. The key-value pairs represent the level 3 fields to submit to the gateway.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Document.UserDefined">
            <summary>
            Up to 50 key value pairs can be stored in this object. Note: Adding DisableEmailReceipt under UserDefined to disable PayFabric's payment receipt to be sent out for the processed transaction, the possible values are True and False. If the value is True, this will disable the payment receipt to be sent out for the processed transaction. If the value is False or empty or the field is not submitted, this will enable the payment receipt to be sent out for the processed transaction based on the configuration of Payment Receipt.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Document.DefaultBillTo">
            <summary>
            Address object. no restriction to these address fields, partially input is acceptable.
            </summary>
        </member>
        <member name="F:PayFabric.Net.Models.PayFabricTransactionType.Sale">
            <summary>
            A Sale at one processor may be called Capture at another. An approved Sale is an immediate charge to the customer’s credit card or account. Money will not be moved until settlement has occurred. A Sale can only be reversed with a Void or a Refund. A Sale transaction does the same thing regardless of it being a credit card transaction, an eCheck transaction, or an ACH transaction.
            
            A Credit Card Sale transaction can be reversed by issuing a Refund or Void.
            </summary>
        </member>
        <member name="F:PayFabric.Net.Models.PayFabricTransactionType.Authorization">
            <summary>
            A Authorization may also be known as a Pre-Authorize, Pre-Authorization or Authorization. When dealing with credit card transactions a Authorization is the reserve of a specified amount on the customer’s credit card or account. A Authorization prevents the customer from using that portion of their credit / funds, but does not actually charge the card nor transfer any money. A Authorization is useful for companies that ship merchandise one or more days after receiving an order. By issuing a Authorization, a company reserves the necessary amount on the customer’s card at order placement time. As long as the Authorization transaction remains open an approved Capture transaction is guaranteed. A Capture transaction is necessary to complete the Authorization.
            
            The number of days a Authorization will stay open is determined by each cardholder’s issuing bank. The most common number is seven to ten days, but some banks may hold Authorization for as long as four weeks and little as three days.
            
            A Authorization transaction cannot be reversed. Issuing a Void for a Authorization transaction will not free up any money on the customer’s credit card. To free up the reserved money you would need to issue a Capture transaction and then Void that captured amount.
            
            When dealing with eChecks and ACH, a Authorization is not supported.
            </summary>
        </member>
        <member name="F:PayFabric.Net.Models.PayFabricTransactionType.Capture">
             <summary>
             A Capture may also be known as Capture or Delayed Capture. A Capture can only be issued for a transaction that previously has been a Authorization. Under ordinary circumstances, a Capture is assured approval as long as the amount is equal to or less than the original Authorization amount and the Capture transaction is sent before the Authorization has expired. A Capture results in an immediate charge to the customer’s credit card or account. If the Capture is for less than the original Authorization amount, the remainder of the original Authorization amount is released back to the customer’s credit line or account.
             
             A Capture transaction can be reversed by issuing a Refund or Void.
            
             NOTE: Some gateways do not allow Capture transactions with amounts greater than the original Authorization amount. Please check with your gateway to see if that feature is available.
             </summary>
        </member>
        <member name="F:PayFabric.Net.Models.PayFabricTransactionType.Refund">
            <summary>
            A Refund is issued to transfer money from the company’s account to the customer’s account or credit card. There are two types of Refund transactions that you can issue: referenced Refund and non-referenced Refund. A referenced Refund occurs when you remove the payment line, or delete a sales document. To create a non-referenced Refund you need to create a brand new return document. Some payment gateways allow for the reversal of a Refund by issuing a Void if that transaction has not yet been settled. If the transaction has settled you will need to issue a Sale to reverse the Refund.
            
            NOTE: Some gateways do not allow non-referenced Refund transactions to be processed. Please check with your gateway to see if that feature is available.
            </summary>
        </member>
        <member name="F:PayFabric.Net.Models.PayFabricTransactionType.Force">
            <summary>
            A Force is used to enter an already approved authorization/transaction. A Force is typically used for capturing a phone or voice authorization. When entering a Force you will be required to enter the authorization code.
            
            A Force transaction can be reversed by issuing a Refund or a Void.
            </summary>
        </member>
        <member name="F:PayFabric.Net.Models.PayFabricTransactionType.Void">
            <summary>
            A Void is issued for an unsettled approved transaction. When a Void is successfully issued, neither the Void nor the original transaction will appear on the customer’s statement. A Void can only be issued against an unsettled transaction. When a Void is sent, if the original transaction has already been settled, the Void will be denied and a warning will be displayed. A Credit Card settled Sale transaction must be reversed with a Refund.
            </summary>
        </member>
        <member name="F:PayFabric.Net.Models.PayFabricTransactionType.Verify">
            <summary>
            A Verify is used to validate credit card number. It's not a payment, PayFabric won't settle Verify transactions, and unable to reverse Verify transactions. Verify transaction only supports in Create Transaction/Update Transaction/Process Transaction APIs, it is not available in portal and hosted payment page. Only EVO gateway supports Verify transaction with Credit Card payment method. PayFabric will set tranaction's Amount to 0.00 if anything other than 0.00 is passed through for Verify transaction.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.ServiceNetResponse.Success">
            <summary>
            Indicate if the transaction call success
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.ServiceNetResponse.TransactionStatus">
            <summary>
            The transaction status, <see cref="P:PayFabric.Net.Models.ServiceNetResponse.TransactionStatus"/>
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.ServiceNetResponse.RawResponse">
            <summary>
            The raw http response message.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.ServiceNetResponse.TransactionResponse">
            <summary>
            The transaction response returned from PayFabric
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.ServiceNetResponse.ServiceException">
            <summary>
            The exception during the transaction process.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.SimpleTransaction.Key">
            <summary>
            PayFabric transaction key. This is generated by PayFabric upon creation of the transaction.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.SimpleTransaction.OriginationID">
            <summary>
            Unique identifier of the transaction. Generated by the Payment Gateway.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.SimpleTransaction.Status">
            <summary>
            Status message indicating the status of the transaction. Possible values are Approved, Denied, Declined, Failure, AVSFailure, More Info.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.SimpleTransaction.TrxDate">
            <summary>
            Transaction date. It's format should like "3/23/2015 11:16:19 PM".
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.SimpleTransaction.Type">
            <summary>
            Transaction type. The possible values are Sale,Book,Ship,Void,Credit,Force.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Transaction.Key">
            <summary>
            PayFabric transaction key. Generated by PayFabric and returned to the client upon creation of the transaction. Omit this field when creating a new transaction.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Transaction.Amount">
            <summary>
            Transaction amount, only accept 2 decimals.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Transaction.Customer">
            <summary>
            Customer ID
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Transaction.Currency">
            <summary>
            Currency code, such as USD.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Transaction.Card">
            <summary>
            Card object. If you are using an existing card, you only need to specify the ID of the card. If using a new card then all fields are required.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Transaction.SetupId">
            <summary>
            Gateway account profile name. This name is configurable and is defined by the client on the PayFabric web portal.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Transaction.Tender">
            <summary>
            Tender type. Valid values are CreditCard, ECheck.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Transaction.Type">
            <summary>
            Transaction type. Valid values are Sale,Book,Ship,Void,Credit, Force. 
            For more information on PayFabric Transaction Types, click <see cref="T:PayFabric.Net.Models.PayFabricTransactionType"/>
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Transaction.BatchNumber">
            <summary>
            Batch number name. For saving this transaction into a PayFabric batch. Merchant can process the batch on PayFabric portal. For Verify transaction type, the value in this attribute will be removed automatically.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Transaction.ModifiedOn">
            <summary>
            Timestamp indicating when this transaction was last modified. It's format should like "3/23/2015 11:16:19 PM".
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Transaction.ReqTrxTag">
            <summary>
            Required by FirstData for Void,Ship and reference Credit transactions.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Transaction.TrxResponse">
            <summary>
            Transaction response from Payment Gateway.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Transaction.Document">
            <summary>
            Level 2/3 transaction fields, as well as User Defined fields.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Transaction.ReferenceTrxs">
            <summary>
            Array of a <see cref="T:PayFabric.Net.Models.SimpleTransaction"/> which represents the original transactions. Value is Set if this transaction is a reference transaction.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Transaction.TrxUserDefine1">
            <summary>
            User Defined field 1
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Transaction.TrxUserDefine2">
            <summary>
            User Defined field 2
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Transaction.TrxUserDefinee">
            <summary>
            User Defined field 3
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Transaction.TrxUserDefine4">
            <summary>
            User Defined field 4
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Transaction.MSO_EngineGUID">
            <summary>
            GUID of gateway account profile for this transaction. Developer can utilize this field
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Transaction.PayDate">
            <summary>
            A future date to process this transaction. In another word, this transaction won't be processed right away by setting this field. It's format should like "3/23/2015". For Verify transaction type, the value in this attribute will be removed automatically.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Transaction.ReferenceKey">
            <summary>
            The original transaction key if this transaction is a reference transaction
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Transaction.AuthorizationType">
            <summary>
            The authorization type of the transaction, valid values are Reauthorization, Resubmission, Incremental or NotSet
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Transaction.TrxSchedule">
            <summary>
            The type authorization of transaction to be processed, valid values are Unscheduled, ScheduledInstallment, ScheduledRecurring or NotSet
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Transaction.TrxInitiation">
            <summary>
            The entity that initiated the transaction, valid values are Merchant, Customer or NotSet
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.Transaction.CCEntryIndicator">
            <summary>
            The identifier that specifies whether the card used on the transaction is a stored credential or newly entered, valid values are Entered or Stored
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.TransactionResponse.TrxKey">
            <summary>
            PayFabric transaction key. This is generated upon creation of the transaction in the PayFabric server.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.TransactionResponse.AuthCode">
            <summary>
            Authorization code. Generated by the Payment Gateway.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.TransactionResponse.Status">
            <summary>
            Status of transaction. Generated by the Payment Gateway. Possible values are Approved, Denied, Declined, Failure, AVSFailure, and More Info.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.TransactionResponse.ResultCode">
            <summary>
            Result code of the transaction. Generated by the Payment Gateway.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.TransactionResponse.Message">
            <summary>
            Result message of the transaction. Generated by the Payment Gateway.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.TransactionResponse.OriginationID">
            <summary>
            Unique identifier for the transaction. Generated by the Payment Gateway.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.TransactionResponse.TrxDate">
            <summary>
            Date of transaction. It's format should like "3/23/2015 11:16:19 PM".
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.TransactionResponse.RespTrxTag">
            <summary>
            A tag value which is generated by FirstData, which must be included when submitting a transaction to FirstData. This is only valid if FirstData GGe4 is the Payment Gateway.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.TransactionResponse.CVV2Response">
            <summary>
            Verification status code of CVC code. Generated by the Payment Gateway.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.TransactionResponse.AVSZipResponse">
            <summary>
            Verification status code of zip code. Generated by the Payment Gateway.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.TransactionResponse.AVSAddressResponse">
            <summary>
            Verification status code of billing address. Generated by the Payment Gateway.
            </summary>
        </member>
        <member name="P:PayFabric.Net.Models.TransactionResponse.IAVSAddressResponse">
            <summary>
            Flag indicating that address verification has been ignored because the address is an international address. Generated by the Payment Gateway.
            </summary>
        </member>
        <member name="F:PayFabric.Net.Models.TransactionType.Sale">
            <summary>
            A Sale at one processor may be called Capture at another. An approved Sale is an immediate charge to the customer’s credit card or account. Money will not be moved until settlement has occurred. A Sale can only be reversed with a Void or a Refund. A Sale transaction does the same thing regardless of it being a credit card transaction, an eCheck transaction, or an ACH transaction.
            
            A Credit Card Sale transaction can be reversed by issuing a Refund or Void.
            </summary>
        </member>
        <member name="F:PayFabric.Net.Models.TransactionType.Authorization">
            <summary>
            A Authorization may also be known as a Pre-Authorize, Pre-Authorization or Authorization. When dealing with credit card transactions a Authorization is the reserve of a specified amount on the customer’s credit card or account. A Authorization prevents the customer from using that portion of their credit / funds, but does not actually charge the card nor transfer any money. A Authorization is useful for companies that ship merchandise one or more days after receiving an order. By issuing a Authorization, a company reserves the necessary amount on the customer’s card at order placement time. As long as the Authorization transaction remains open an approved Capture transaction is guaranteed. A Capture transaction is necessary to complete the Authorization.
            
            The number of days a Authorization will stay open is determined by each cardholder’s issuing bank. The most common number is seven to ten days, but some banks may hold Authorization for as long as four weeks and little as three days.
            
            A Authorization transaction cannot be reversed. Issuing a Void for a Authorization transaction will not free up any money on the customer’s credit card. To free up the reserved money you would need to issue a Capture transaction and then Void that captured amount.
            
            When dealing with eChecks and ACH, a Authorization is not supported.
            </summary>
        </member>
        <member name="F:PayFabric.Net.Models.TransactionType.Capture">
            <summary>
            A Capture may also be known as Capture or Delayed Capture. A Capture can only be issued for a transaction that previously has been a Authorization. Under ordinary circumstances, a Capture is assured approval as long as the amount is equal to or less than the original Authorization amount and the Capture transaction is sent before the Authorization has expired. A Capture results in an immediate charge to the customer’s credit card or account. If the Capture is for less than the original Authorization amount, the remainder of the original Authorization amount is released back to the customer’s credit line or account.
            
            A Capture transaction can be reversed by issuing a Refund or Void.
            
            NOTE: Some gateways do not allow Capture transactions with amounts greater than the original Authorization amount. Please check with your gateway to see if that feature is available.
            </summary>
        </member>
        <member name="F:PayFabric.Net.Models.TransactionType.Refund">
            <summary>
            A Refund is issued to transfer money from the company’s account to the customer’s account or credit card. There are two types of Refund transactions that you can issue: referenced Refund and non-referenced Refund. A referenced Refund occurs when you remove the payment line, or delete a sales document. To create a non-referenced Refund you need to create a brand new return document. Some payment gateways allow for the reversal of a Refund by issuing a Void if that transaction has not yet been settled. If the transaction has settled you will need to issue a Sale to reverse the Refund.
            
            NOTE: Some gateways do not allow non-referenced Refund transactions to be processed. Please check with your gateway to see if that feature is available.
            </summary>
        </member>
        <member name="F:PayFabric.Net.Models.TransactionType.Force">
            <summary>
            A Force is used to enter an already approved authorization/transaction. A Force is typically used for capturing a phone or voice authorization. When entering a Force you will be required to enter the authorization code.
            
            A Force transaction can be reversed by issuing a Refund or a Void.
            
            NOTE: Authorization code from the payment gateway is required to process Force transactions. Cybersource gateway currently does not support Force transaction type.
            </summary>
        </member>
        <member name="F:PayFabric.Net.Models.TransactionType.Void">
            <summary>
            A Void is issued for an unsettled approved transaction. When a Void is successfully issued, neither the Void nor the original transaction will appear on the customer’s statement. A Void can only be issued against an unsettled transaction. When a Void is sent, if the original transaction has already been settled, the Void will be denied and a warning will be displayed. A Credit Card settled Sale transaction must be reversed with a Refund.
            </summary>
        </member>
        <member name="F:PayFabric.Net.Models.TransactionType.Verify">
            <summary>
            A Verify is used to validate credit card number. It's not a payment, PayFabric won't settle Verify transactions, and unable to reverse Verify transactions. Verify transaction only supports in Create Transaction/Update Transaction/Process Transaction APIs, it is not available in portal and hosted payment page. Only EVO gateway supports Verify transaction with Credit Card payment method. PayFabric will set tranaction's Amount to 0.00 if anything other than 0.00 is passed through for Verify transaction.
            </summary>
        </member>
        <member name="M:PayFabric.Net.PayFabricPaymentService.Capture(System.String,System.Nullable{System.Decimal},PayFabric.Net.Models.ExtendedInformation)">
            <summary>
            Type: Ship
            </summary>
            <param name="transactionKey"></param>
            <param name="amount"></param>
            <param name="extInfo"></param>
            <returns></returns>
        </member>
        <member name="M:PayFabric.Net.PayFabricPaymentService.Charge(System.Decimal,System.String,PayFabric.Net.Models.Card,PayFabric.Net.Models.ExtendedInformation)">
            <summary>
            Type: Sale
            </summary>
            <param name="amount"></param>
            <param name="currency"></param>
            <param name="card"></param>
            <param name="extInfo"></param>
            <returns></returns>
        </member>
        <member name="M:PayFabric.Net.PayFabricPaymentService.Refund(System.String,System.Nullable{System.Decimal},PayFabric.Net.Models.ExtendedInformation)">
            <summary>
            Type: Credit
            GET /reference/151013003792?trxtype=CREDIT
            </summary>
            <param name="transactionKey"></param>
            <param name="amount"></param>
            <param name="extInfo"></param>
            <returns></returns>
        </member>
        <member name="M:PayFabric.Net.PayFabricPaymentService.PreAuthorize(System.Decimal,System.String,PayFabric.Net.Models.Card,PayFabric.Net.Models.ExtendedInformation)">
            <summary>
            Type: BOOK
            </summary>
            <param name="amount"></param>
            <param name="currency"></param>
            <param name="card"></param>
            <param name="extInfo"></param>
            <returns></returns>
        </member>
        <member name="M:PayFabric.Net.PayFabricPaymentService.Credit(System.Decimal,System.String,PayFabric.Net.Models.Card,PayFabric.Net.Models.ExtendedInformation)">
            <summary>
            Type: Credit
            </summary>
            <param name="amount"></param>
            <param name="currency"></param>
            <param name="card"></param>
            <param name="extInfo"></param>
            <returns></returns>
        </member>
        <member name="M:PayFabric.Net.PayFabricPaymentService.Void(System.String,PayFabric.Net.Models.ExtendedInformation)">
            <summary>
            Type:VOID
            GET /reference/151013003792?trxtype=VOID
            </summary>
            <param name="transactionKey"></param>
            <param name="extInfo"></param>
            <returns></returns>
        </member>
    </members>
</doc>
